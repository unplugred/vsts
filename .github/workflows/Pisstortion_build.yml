name: Pisstortion Build

env:
  PLUG: Pisstortion
  NOSPACE: Pisstortion

on:
  push:
    paths:
      - '**Pisstortion**'
  pull_request:
    paths:
      - '**Pisstortion**'
    branches:
      - master

jobs:
  build:
    name: build
    strategy:
      matrix:
        include:
        - {
            name: "Win64",
            os: windows-latest,
            compiler: "Visual Studio 17 2022",
            folder: "build_windows"
          }
        - {
            name: "Linux",
            os: ubuntu-latest,
            compiler: "Unix Makefiles",
            folder: "build_linux"
          }
        - {
            name: "Mac",
            os: macos-latest,
            compiler: "Xcode",
            folder: "build_mac"
          }
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - if: startsWith(matrix.os, 'ubuntu')
      name: (linux) install juce dependencies
      id: juce_dependencies
      run: | 
        sudo apt-get update
        sudo apt-get install g++ libasound2-dev libjack-jackd2-dev ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev

    - name: cache stuff
      id: cache_stuff
      uses: actions/cache@v3
      with:
        path: "${{matrix.folder}}"
        key: "${{matrix.folder}}"

    - if: startsWith(matrix.os, 'macos')
      name: (mac) import certificates
      id: import_certificates
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

    - if: startsWith(matrix.os, 'windows')
      name: (windows) configure
      id: configure_windows
      run: |
        cmake -DBANNERTYPE=0 -B "${{matrix.folder}}" -G "${{matrix.compiler}}" -T host=x64 -A x64

    - if: ${{ !startsWith(matrix.os, 'windows') }}
      name: (unix) configure
      id: configure
      run: |
        cmake -DBANNERTYPE=0 -B "${{matrix.folder}}" -G "${{matrix.compiler}}"

    - name: build
      id: build
      run: |
        cmake --build "${{matrix.folder}}" --config Release --target ${{env.NOSPACE}}_VST3
        cmake --build "${{matrix.folder}}" --config Release --target ${{env.NOSPACE}}_CLAP

    - if: startsWith(matrix.os, 'windows')
      name: (windows) package
      id: package_windows
      run: |
        mv "Setup/${{matrix.folder}}/paid/${{env.PLUG}}.vst3/Contents/x86_64-win/${{env.PLUG}}.vst3" "Setup/${{env.PLUG}}.vst3"
        rm -r "Setup/${{matrix.folder}}/paid/${{env.PLUG}}.vst3"
        mv "Setup/${{env.PLUG}}.vst3" "Setup/${{matrix.folder}}/paid/${{env.PLUG}}.vst3"
        mv "${{matrix.folder}}/Plugins/${{env.PLUG}}/${{env.NOSPACE}}_artefacts/Release/CLAP/${{env.PLUG}}.clap" "Setup/${{matrix.folder}}/paid/${{env.PLUG}}.clap"

    - if: startsWith(matrix.os, 'linux')
      name: (linux) package
      id: package_linux
      run: |
        mv "${{matrix.folder}}/Plugins/${{env.PLUG}}/${{env.NOSPACE}}_artefacts/CLAP/${{env.PLUG}}.clap" "Setup/${{matrix.folder}}/paid/${{env.PLUG}}.clap"

    - if: startsWith(matrix.os, 'macos')
      name: (mac) package
      id: package_mac
      run: |
        mv "${{matrix.folder}}/Plugins/${{env.PLUG}}/${{env.NOSPACE}}_artefacts/Release/CLAP/${{env.PLUG}}.clap" "Setup/${{matrix.folder}}/paid/${{env.PLUG}}.clap"

    - if: startsWith(matrix.os, 'macos')
      name: (mac) code signing
      id: code_signing
      run: |
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.vst3" --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.clap" --deep --strict --options=runtime --timestamp
        codesign -dv --verbose=4 "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.vst3"
        codesign -dv --verbose=4 "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.clap"
        zip -r "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}_vst3.zip" "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.vst3"
        zip -r "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}_clap.zip" "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.clap"
        rm -r "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.vst3"
        rm -r "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.clap"
        xcrun notarytool submit "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}_vst3.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun notarytool submit "Setup/${{ matrix.folder }}/paid/${{ env.PLUG }}_clap.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        unzip "Setup/${{ matrix.folder }}/paid/${{ env.plug }}_vst3.zip"
        unzip "Setup/${{ matrix.folder }}/paid/${{ env.plug }}_clap.zip"
        rm "Setup/${{ matrix.folder }}/paid/${{ env.plug }}_vst3.zip"
        rm "Setup/${{ matrix.folder }}/paid/${{ env.plug }}_clap.zip"
        xcrun stapler staple "Setup/${{ matrix.folder }}/paid/${{ env.plug }}.vst3"
        xcrun stapler staple "Setup/${{ matrix.folder }}/paid/${{ env.plug }}.clap"
        spctl -vvv --assess --type exec "Setup/${{ matrix.folder }}/paid/${{ env.plug }}.vst3"
        spctl -vvv --assess --type exec "Setup/${{ matrix.folder }}/paid/${{ env.plug }}.clap"

    - uses: actions/upload-artifact@v3
      with:
        name: ${{env.PLUG}} ${{ matrix.name }}
        path: Setup/${{matrix.folder}}/paid

    - if: startsWith(matrix.os, 'windows')
      name: (windows) configure free
      id: configure_windows_free
      run: |
        cmake -DBANNERTYPE=1 -B "${{matrix.folder}}" -G "${{matrix.compiler}}" -T host=x64 -A x64

    - if: ${{ !startsWith(matrix.os, 'windows') }}
      name: (unix) configure free
      id: configure_free
      run: |
        cmake -DBANNERTYPE=1 -B "${{matrix.folder}}" -G "${{matrix.compiler}}"

    - name: build free
      id: build_free
      run: |
        cmake --build "${{matrix.folder}}" --config Release --target ${{env.NOSPACE}}_VST3
        cmake --build "${{matrix.folder}}" --config Release --target ${{env.NOSPACE}}_CLAP

    - if: startsWith(matrix.os, 'windows')
      name: (windows) package free
      id: package_windows_free
      run: |
        mv "Setup/${{matrix.folder}}/free/${{env.PLUG}}.vst3/Contents/x86_64-win/${{env.PLUG}}.vst3" "Setup/${{env.PLUG}}.vst3"
        rm -r "Setup/${{matrix.folder}}/free/${{env.PLUG}}.vst3"
        mv "Setup/${{env.PLUG}}.vst3" "Setup/${{matrix.folder}}/free/${{env.PLUG}}.vst3"
        mv "${{matrix.folder}}/Plugins/${{env.PLUG}}/${{env.NOSPACE}}_artefacts/Release/CLAP/${{env.PLUG}}.clap" "Setup/${{matrix.folder}}/free/${{env.PLUG}}.clap"

    - if: startsWith(matrix.os, 'linux')
      name: (linux) package free
      id: package_linux_free
      run: |
        mv "${{matrix.folder}}/Plugins/${{env.PLUG}}/${{env.NOSPACE}}_artefacts/CLAP/${{env.PLUG}}.clap" "Setup/${{matrix.folder}}/free/${{env.PLUG}}.clap"

    - if: startsWith(matrix.os, 'macos')
      name: (mac) package free
      id: package_mac_free
      run: |
        mv "${{matrix.folder}}/Plugins/${{env.PLUG}}/${{env.NOSPACE}}_artefacts/Release/CLAP/${{env.PLUG}}.clap" "Setup/${{matrix.folder}}/free/${{env.PLUG}}.clap"

    - if: startsWith(matrix.os, 'macos')
      name: (mac) code signing free
      id: code_signing_free
      run: |
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.vst3" --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.clap" --deep --strict --options=runtime --timestamp
        codesign -dv --verbose=4 "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.vst3"
        codesign -dv --verbose=4 "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.clap"
        zip -r "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}_vst3.zip" "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.vst3"
        zip -r "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}_clap.zip" "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.clap"
        rm -r "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.vst3"
        rm -r "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}.clap"
        xcrun notarytool submit "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}_vst3.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun notarytool submit "Setup/${{ matrix.folder }}/free/${{ env.PLUG }}_clap.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        unzip "Setup/${{ matrix.folder }}/free/${{ env.plug }}_vst3.zip"
        unzip "Setup/${{ matrix.folder }}/free/${{ env.plug }}_clap.zip"
        rm "Setup/${{ matrix.folder }}/free/${{ env.plug }}_vst3.zip"
        rm "Setup/${{ matrix.folder }}/free/${{ env.plug }}_clap.zip"
        xcrun stapler staple "Setup/${{ matrix.folder }}/free/${{ env.plug }}.vst3"
        xcrun stapler staple "Setup/${{ matrix.folder }}/free/${{ env.plug }}.clap"
        spctl -vvv --assess --type exec "Setup/${{ matrix.folder }}/free/${{ env.plug }}.vst3"
        spctl -vvv --assess --type exec "Setup/${{ matrix.folder }}/free/${{ env.plug }}.clap"

    - uses: actions/upload-artifact@v3
      with:
        name: ${{env.PLUG}} Free ${{ matrix.name }}
        path: Setup/${{matrix.folder}}/free

    - if: startsWith(matrix.os, 'windows')
      name: (windows) build installer
      id: installer
      run: |
        cd Setup
        iscc "${{env.PLUG}}.iss"
        iscc "${{env.PLUG}} Free.iss"

    - if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.PLUG}} Installer
        path: "Setup/Output/${{env.PLUG}} Installer.exe"

    - if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.PLUG}} Free Installer
        path: "Setup/Output/${{env.PLUG}} Free Installer.exe"

